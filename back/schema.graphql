# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  surname: String
  role: String
  companyName: String
  companyMarketNameRu: String
  companyMarketNameEn: String
  postcode: String
  country: String
  city: String
  street: String
  house: String
  building: String
  productsCreated(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0): [Product!]
  productsCreatedCount(where: ProductWhereInput! = {}): Int
  productsSelling(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0): [Product!]
  productsSellingCount(where: ProductWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  surname: StringFilter
  role: StringFilter
  companyName: StringFilter
  companyMarketNameRu: StringFilter
  companyMarketNameEn: StringFilter
  postcode: StringFilter
  country: StringFilter
  city: StringFilter
  street: StringFilter
  house: StringFilter
  building: StringFilter
  productsCreated: ProductManyRelationFilter
  productsSelling: ProductManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  surname: OrderDirection
  role: OrderDirection
  companyName: OrderDirection
  companyMarketNameRu: OrderDirection
  companyMarketNameEn: OrderDirection
  postcode: OrderDirection
  country: OrderDirection
  city: OrderDirection
  street: OrderDirection
  house: OrderDirection
  building: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  surname: String
  role: String
  companyName: String
  companyMarketNameRu: String
  companyMarketNameEn: String
  postcode: String
  country: String
  city: String
  street: String
  house: String
  building: String
  productsCreated: ProductRelateToManyForUpdateInput
  productsSelling: ProductRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  surname: String
  role: String
  companyName: String
  companyMarketNameRu: String
  companyMarketNameEn: String
  postcode: String
  country: String
  city: String
  street: String
  house: String
  building: String
  productsCreated: ProductRelateToManyForCreateInput
  productsSelling: ProductRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type Image {
  id: ID!
  name: String
  altText: String
  image: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  name: StringFilter
  altText: StringFilter
}

input ImageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  altText: OrderDirection
}

input ImageUpdateInput {
  name: String
  altText: String
  image: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  name: String
  altText: String
  image: ImageFieldInput
}

type Product {
  id: ID!
  titleRu: String
  titleEn: String
  titleCh: String
  captionRu: String
  captionEn: String
  captionCh: String
  descriptionRu: String
  descriptionEn: String
  descriptionCh: String
  balance: Int
  category: Category
  subCategory: SubCategory
  subSubCategory: SubSubCategory
  intervals: String
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  image: Image
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  author: User
  seller: User
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  titleRu: StringFilter
  titleEn: StringFilter
  titleCh: StringFilter
  captionRu: StringFilter
  captionEn: StringFilter
  captionCh: StringFilter
  descriptionRu: StringFilter
  descriptionEn: StringFilter
  descriptionCh: StringFilter
  balance: IntNullableFilter
  category: CategoryWhereInput
  subCategory: SubCategoryWhereInput
  subSubCategory: SubSubCategoryWhereInput
  intervals: StringFilter
  isActive: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  image: ImageWhereInput
  images: ImageManyRelationFilter
  author: UserWhereInput
  seller: UserWhereInput
  tags: TagManyRelationFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  titleRu: OrderDirection
  titleEn: OrderDirection
  titleCh: OrderDirection
  captionRu: OrderDirection
  captionEn: OrderDirection
  captionCh: OrderDirection
  descriptionRu: OrderDirection
  descriptionEn: OrderDirection
  descriptionCh: OrderDirection
  balance: OrderDirection
  intervals: OrderDirection
  isActive: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProductUpdateInput {
  titleRu: String
  titleEn: String
  titleCh: String
  captionRu: String
  captionEn: String
  captionCh: String
  descriptionRu: String
  descriptionEn: String
  descriptionCh: String
  balance: Int
  category: CategoryRelateToOneForUpdateInput
  subCategory: SubCategoryRelateToOneForUpdateInput
  subSubCategory: SubSubCategoryRelateToOneForUpdateInput
  intervals: String
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  image: ImageRelateToOneForUpdateInput
  images: ImageRelateToManyForUpdateInput
  author: UserRelateToOneForUpdateInput
  seller: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input SubCategoryRelateToOneForUpdateInput {
  create: SubCategoryCreateInput
  connect: SubCategoryWhereUniqueInput
  disconnect: Boolean
}

input SubSubCategoryRelateToOneForUpdateInput {
  create: SubSubCategoryCreateInput
  connect: SubSubCategoryWhereUniqueInput
  disconnect: Boolean
}

input ImageRelateToOneForUpdateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
  disconnect: Boolean
}

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  titleRu: String
  titleEn: String
  titleCh: String
  captionRu: String
  captionEn: String
  captionCh: String
  descriptionRu: String
  descriptionEn: String
  descriptionCh: String
  balance: Int
  category: CategoryRelateToOneForCreateInput
  subCategory: SubCategoryRelateToOneForCreateInput
  subSubCategory: SubSubCategoryRelateToOneForCreateInput
  intervals: String
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  image: ImageRelateToOneForCreateInput
  images: ImageRelateToManyForCreateInput
  author: UserRelateToOneForCreateInput
  seller: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input SubCategoryRelateToOneForCreateInput {
  create: SubCategoryCreateInput
  connect: SubCategoryWhereUniqueInput
}

input SubSubCategoryRelateToOneForCreateInput {
  create: SubSubCategoryCreateInput
  connect: SubSubCategoryWhereUniqueInput
}

input ImageRelateToOneForCreateInput {
  create: ImageCreateInput
  connect: ImageWhereUniqueInput
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  products: ProductManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  products: ProductRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  products: ProductRelateToManyForCreateInput
}

type Category {
  id: ID!
  code: String
  titleRu: String
  titleEn: String
  titleCh: String
  children(where: SubCategoryWhereInput! = {}, orderBy: [SubCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0): [SubCategory!]
  childrenCount(where: SubCategoryWhereInput! = {}): Int
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  code: StringFilter
  titleRu: StringFilter
  titleEn: StringFilter
  titleCh: StringFilter
  children: SubCategoryManyRelationFilter
  isActive: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SubCategoryManyRelationFilter {
  every: SubCategoryWhereInput
  some: SubCategoryWhereInput
  none: SubCategoryWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  code: OrderDirection
  titleRu: OrderDirection
  titleEn: OrderDirection
  titleCh: OrderDirection
  isActive: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CategoryUpdateInput {
  code: String
  titleRu: String
  titleEn: String
  titleCh: String
  children: SubCategoryRelateToManyForUpdateInput
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input SubCategoryRelateToManyForUpdateInput {
  disconnect: [SubCategoryWhereUniqueInput!]
  set: [SubCategoryWhereUniqueInput!]
  create: [SubCategoryCreateInput!]
  connect: [SubCategoryWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  code: String
  titleRu: String
  titleEn: String
  titleCh: String
  children: SubCategoryRelateToManyForCreateInput
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input SubCategoryRelateToManyForCreateInput {
  create: [SubCategoryCreateInput!]
  connect: [SubCategoryWhereUniqueInput!]
}

type SubCategory {
  id: ID!
  code: String
  titleRu: String
  titleEn: String
  titleCh: String
  parent: Category
  children(where: SubSubCategoryWhereInput! = {}, orderBy: [SubSubCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0): [SubSubCategory!]
  childrenCount(where: SubSubCategoryWhereInput! = {}): Int
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input SubCategoryWhereUniqueInput {
  id: ID
}

input SubCategoryWhereInput {
  AND: [SubCategoryWhereInput!]
  OR: [SubCategoryWhereInput!]
  NOT: [SubCategoryWhereInput!]
  id: IDFilter
  code: StringFilter
  titleRu: StringFilter
  titleEn: StringFilter
  titleCh: StringFilter
  parent: CategoryWhereInput
  children: SubSubCategoryManyRelationFilter
  isActive: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SubSubCategoryManyRelationFilter {
  every: SubSubCategoryWhereInput
  some: SubSubCategoryWhereInput
  none: SubSubCategoryWhereInput
}

input SubCategoryOrderByInput {
  id: OrderDirection
  code: OrderDirection
  titleRu: OrderDirection
  titleEn: OrderDirection
  titleCh: OrderDirection
  isActive: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SubCategoryUpdateInput {
  code: String
  titleRu: String
  titleEn: String
  titleCh: String
  parent: CategoryRelateToOneForUpdateInput
  children: SubSubCategoryRelateToManyForUpdateInput
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input SubSubCategoryRelateToManyForUpdateInput {
  disconnect: [SubSubCategoryWhereUniqueInput!]
  set: [SubSubCategoryWhereUniqueInput!]
  create: [SubSubCategoryCreateInput!]
  connect: [SubSubCategoryWhereUniqueInput!]
}

input SubCategoryUpdateArgs {
  where: SubCategoryWhereUniqueInput!
  data: SubCategoryUpdateInput!
}

input SubCategoryCreateInput {
  code: String
  titleRu: String
  titleEn: String
  titleCh: String
  parent: CategoryRelateToOneForCreateInput
  children: SubSubCategoryRelateToManyForCreateInput
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input SubSubCategoryRelateToManyForCreateInput {
  create: [SubSubCategoryCreateInput!]
  connect: [SubSubCategoryWhereUniqueInput!]
}

type SubSubCategory {
  id: ID!
  code: String
  titleRu: String
  titleEn: String
  titleCh: String
  parent: SubCategory
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input SubSubCategoryWhereUniqueInput {
  id: ID
}

input SubSubCategoryWhereInput {
  AND: [SubSubCategoryWhereInput!]
  OR: [SubSubCategoryWhereInput!]
  NOT: [SubSubCategoryWhereInput!]
  id: IDFilter
  code: StringFilter
  titleRu: StringFilter
  titleEn: StringFilter
  titleCh: StringFilter
  parent: SubCategoryWhereInput
  isActive: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SubSubCategoryOrderByInput {
  id: OrderDirection
  code: OrderDirection
  titleRu: OrderDirection
  titleEn: OrderDirection
  titleCh: OrderDirection
  isActive: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SubSubCategoryUpdateInput {
  code: String
  titleRu: String
  titleEn: String
  titleCh: String
  parent: SubCategoryRelateToOneForUpdateInput
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input SubSubCategoryUpdateArgs {
  where: SubSubCategoryWhereUniqueInput!
  data: SubSubCategoryUpdateInput!
}

input SubSubCategoryCreateInput {
  code: String
  titleRu: String
  titleEn: String
  titleCh: String
  parent: SubCategoryRelateToOneForCreateInput
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type Cart {
  id: ID!
  products: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CartWhereUniqueInput {
  id: ID
  userId: String
}

input CartWhereInput {
  AND: [CartWhereInput!]
  OR: [CartWhereInput!]
  NOT: [CartWhereInput!]
  id: IDFilter
  products: StringFilter
  userId: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CartOrderByInput {
  id: OrderDirection
  products: OrderDirection
  userId: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CartUpdateInput {
  products: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CartUpdateArgs {
  where: CartWhereUniqueInput!
  data: CartUpdateInput!
}

input CartCreateInput {
  products: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type OrderStatus {
  id: ID!
  code: String
  color: String
  titleRu: String
  titleEn: String
  titleCh: String
  createdAt: DateTime
  updatedAt: DateTime
}

input OrderStatusWhereUniqueInput {
  id: ID
}

input OrderStatusWhereInput {
  AND: [OrderStatusWhereInput!]
  OR: [OrderStatusWhereInput!]
  NOT: [OrderStatusWhereInput!]
  id: IDFilter
  code: StringFilter
  color: StringFilter
  titleRu: StringFilter
  titleEn: StringFilter
  titleCh: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input OrderStatusOrderByInput {
  id: OrderDirection
  code: OrderDirection
  color: OrderDirection
  titleRu: OrderDirection
  titleEn: OrderDirection
  titleCh: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input OrderStatusUpdateInput {
  code: String
  color: String
  titleRu: String
  titleEn: String
  titleCh: String
  createdAt: DateTime
  updatedAt: DateTime
}

input OrderStatusUpdateArgs {
  where: OrderStatusWhereUniqueInput!
  data: OrderStatusUpdateInput!
}

input OrderStatusCreateInput {
  code: String
  color: String
  titleRu: String
  titleEn: String
  titleCh: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Order {
  id: ID!
  products: JSON
  user: User
  seller: User
  status: OrderStatus
  address: String
  comment: String
  createdAt: DateTime
  updatedAt: DateTime
  confirmedAt: DateTime
  paidAt: DateTime
}

input OrderWhereUniqueInput {
  id: ID
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  user: UserWhereInput
  seller: UserWhereInput
  status: OrderStatusWhereInput
  address: StringFilter
  comment: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  confirmedAt: DateTimeNullableFilter
  paidAt: DateTimeNullableFilter
}

input OrderOrderByInput {
  id: OrderDirection
  address: OrderDirection
  comment: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  confirmedAt: OrderDirection
  paidAt: OrderDirection
}

input OrderUpdateInput {
  products: JSON
  user: UserRelateToOneForUpdateInput
  seller: UserRelateToOneForUpdateInput
  status: OrderStatusRelateToOneForUpdateInput
  address: String
  comment: String
  createdAt: DateTime
  updatedAt: DateTime
  confirmedAt: DateTime
  paidAt: DateTime
}

input OrderStatusRelateToOneForUpdateInput {
  create: OrderStatusCreateInput
  connect: OrderStatusWhereUniqueInput
  disconnect: Boolean
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  products: JSON
  user: UserRelateToOneForCreateInput
  seller: UserRelateToOneForCreateInput
  status: OrderStatusRelateToOneForCreateInput
  address: String
  comment: String
  createdAt: DateTime
  updatedAt: DateTime
  confirmedAt: DateTime
  paidAt: DateTime
}

input OrderStatusRelateToOneForCreateInput {
  create: OrderStatusCreateInput
  connect: OrderStatusWhereUniqueInput
}

type ChatRoom {
  id: ID!
  roomName: String
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  buyer_seller: String
}

input ChatRoomWhereUniqueInput {
  id: ID
  buyer_seller: String
}

input ChatRoomWhereInput {
  AND: [ChatRoomWhereInput!]
  OR: [ChatRoomWhereInput!]
  NOT: [ChatRoomWhereInput!]
  id: IDFilter
  roomName: StringFilter
  users: UserManyRelationFilter
  buyer_seller: StringFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input ChatRoomOrderByInput {
  id: OrderDirection
  roomName: OrderDirection
  buyer_seller: OrderDirection
}

input ChatRoomUpdateInput {
  roomName: String
  users: UserRelateToManyForUpdateInput
  buyer_seller: String
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input ChatRoomUpdateArgs {
  where: ChatRoomWhereUniqueInput!
  data: ChatRoomUpdateInput!
}

input ChatRoomCreateInput {
  roomName: String
  users: UserRelateToManyForCreateInput
  buyer_seller: String
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type ChatMessage {
  id: ID!
  content: String
  room: ChatRoom
  sender: User
  date: DateTime
  system: Boolean
  saved: Boolean
  distributed: Boolean
  seen: Boolean
  deleted: Boolean
  disableActions: Boolean
  disableReactions: Boolean
}

input ChatMessageWhereUniqueInput {
  id: ID
}

input ChatMessageWhereInput {
  AND: [ChatMessageWhereInput!]
  OR: [ChatMessageWhereInput!]
  NOT: [ChatMessageWhereInput!]
  id: IDFilter
  content: StringFilter
  room: ChatRoomWhereInput
  sender: UserWhereInput
  date: DateTimeNullableFilter
  system: BooleanFilter
  saved: BooleanFilter
  distributed: BooleanFilter
  seen: BooleanFilter
  deleted: BooleanFilter
  disableActions: BooleanFilter
  disableReactions: BooleanFilter
}

input ChatMessageOrderByInput {
  id: OrderDirection
  content: OrderDirection
  date: OrderDirection
  system: OrderDirection
  saved: OrderDirection
  distributed: OrderDirection
  seen: OrderDirection
  deleted: OrderDirection
  disableActions: OrderDirection
  disableReactions: OrderDirection
}

input ChatMessageUpdateInput {
  content: String
  room: ChatRoomRelateToOneForUpdateInput
  sender: UserRelateToOneForUpdateInput
  date: DateTime
  system: Boolean
  saved: Boolean
  distributed: Boolean
  seen: Boolean
  deleted: Boolean
  disableActions: Boolean
  disableReactions: Boolean
}

input ChatRoomRelateToOneForUpdateInput {
  create: ChatRoomCreateInput
  connect: ChatRoomWhereUniqueInput
  disconnect: Boolean
}

input ChatMessageUpdateArgs {
  where: ChatMessageWhereUniqueInput!
  data: ChatMessageUpdateInput!
}

input ChatMessageCreateInput {
  content: String
  room: ChatRoomRelateToOneForCreateInput
  sender: UserRelateToOneForCreateInput
  date: DateTime
  system: Boolean
  saved: Boolean
  distributed: Boolean
  seen: Boolean
  deleted: Boolean
  disableActions: Boolean
  disableReactions: Boolean
}

input ChatRoomRelateToOneForCreateInput {
  create: ChatRoomCreateInput
  connect: ChatRoomWhereUniqueInput
}

type CurrencyRate {
  id: ID!
  code: String
  value: String
}

input CurrencyRateWhereUniqueInput {
  id: ID
}

input CurrencyRateWhereInput {
  AND: [CurrencyRateWhereInput!]
  OR: [CurrencyRateWhereInput!]
  NOT: [CurrencyRateWhereInput!]
  id: IDFilter
  code: StringFilter
  value: StringFilter
}

input CurrencyRateOrderByInput {
  id: OrderDirection
  code: OrderDirection
  value: OrderDirection
}

input CurrencyRateUpdateInput {
  code: String
  value: String
}

input CurrencyRateUpdateArgs {
  where: CurrencyRateWhereUniqueInput!
  data: CurrencyRateUpdateInput!
}

input CurrencyRateCreateInput {
  code: String
  value: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createSubCategory(data: SubCategoryCreateInput!): SubCategory
  createSubCategories(data: [SubCategoryCreateInput!]!): [SubCategory]
  updateSubCategory(where: SubCategoryWhereUniqueInput!, data: SubCategoryUpdateInput!): SubCategory
  updateSubCategories(data: [SubCategoryUpdateArgs!]!): [SubCategory]
  deleteSubCategory(where: SubCategoryWhereUniqueInput!): SubCategory
  deleteSubCategories(where: [SubCategoryWhereUniqueInput!]!): [SubCategory]
  createSubSubCategory(data: SubSubCategoryCreateInput!): SubSubCategory
  createSubSubCategories(data: [SubSubCategoryCreateInput!]!): [SubSubCategory]
  updateSubSubCategory(where: SubSubCategoryWhereUniqueInput!, data: SubSubCategoryUpdateInput!): SubSubCategory
  updateSubSubCategories(data: [SubSubCategoryUpdateArgs!]!): [SubSubCategory]
  deleteSubSubCategory(where: SubSubCategoryWhereUniqueInput!): SubSubCategory
  deleteSubSubCategories(where: [SubSubCategoryWhereUniqueInput!]!): [SubSubCategory]
  createCart(data: CartCreateInput!): Cart
  createCarts(data: [CartCreateInput!]!): [Cart]
  updateCart(where: CartWhereUniqueInput!, data: CartUpdateInput!): Cart
  updateCarts(data: [CartUpdateArgs!]!): [Cart]
  deleteCart(where: CartWhereUniqueInput!): Cart
  deleteCarts(where: [CartWhereUniqueInput!]!): [Cart]
  createOrderStatus(data: OrderStatusCreateInput!): OrderStatus
  createOrderStatuses(data: [OrderStatusCreateInput!]!): [OrderStatus]
  updateOrderStatus(where: OrderStatusWhereUniqueInput!, data: OrderStatusUpdateInput!): OrderStatus
  updateOrderStatuses(data: [OrderStatusUpdateArgs!]!): [OrderStatus]
  deleteOrderStatus(where: OrderStatusWhereUniqueInput!): OrderStatus
  deleteOrderStatuses(where: [OrderStatusWhereUniqueInput!]!): [OrderStatus]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createChatRoom(data: ChatRoomCreateInput!): ChatRoom
  createChatRooms(data: [ChatRoomCreateInput!]!): [ChatRoom]
  updateChatRoom(where: ChatRoomWhereUniqueInput!, data: ChatRoomUpdateInput!): ChatRoom
  updateChatRooms(data: [ChatRoomUpdateArgs!]!): [ChatRoom]
  deleteChatRoom(where: ChatRoomWhereUniqueInput!): ChatRoom
  deleteChatRooms(where: [ChatRoomWhereUniqueInput!]!): [ChatRoom]
  createChatMessage(data: ChatMessageCreateInput!): ChatMessage
  createChatMessages(data: [ChatMessageCreateInput!]!): [ChatMessage]
  updateChatMessage(where: ChatMessageWhereUniqueInput!, data: ChatMessageUpdateInput!): ChatMessage
  updateChatMessages(data: [ChatMessageUpdateArgs!]!): [ChatMessage]
  deleteChatMessage(where: ChatMessageWhereUniqueInput!): ChatMessage
  deleteChatMessages(where: [ChatMessageWhereUniqueInput!]!): [ChatMessage]
  createCurrencyRate(data: CurrencyRateCreateInput!): CurrencyRate
  createCurrencyRates(data: [CurrencyRateCreateInput!]!): [CurrencyRate]
  updateCurrencyRate(where: CurrencyRateWhereUniqueInput!, data: CurrencyRateUpdateInput!): CurrencyRate
  updateCurrencyRates(data: [CurrencyRateUpdateArgs!]!): [CurrencyRate]
  deleteCurrencyRate(where: CurrencyRateWhereUniqueInput!): CurrencyRate
  deleteCurrencyRates(where: [CurrencyRateWhereUniqueInput!]!): [CurrencyRate]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  subCategories(where: SubCategoryWhereInput! = {}, orderBy: [SubCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0): [SubCategory!]
  subCategory(where: SubCategoryWhereUniqueInput!): SubCategory
  subCategoriesCount(where: SubCategoryWhereInput! = {}): Int
  subSubCategories(where: SubSubCategoryWhereInput! = {}, orderBy: [SubSubCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0): [SubSubCategory!]
  subSubCategory(where: SubSubCategoryWhereUniqueInput!): SubSubCategory
  subSubCategoriesCount(where: SubSubCategoryWhereInput! = {}): Int
  carts(where: CartWhereInput! = {}, orderBy: [CartOrderByInput!]! = [], take: Int, skip: Int! = 0): [Cart!]
  cart(where: CartWhereUniqueInput!): Cart
  cartsCount(where: CartWhereInput! = {}): Int
  orderStatuses(where: OrderStatusWhereInput! = {}, orderBy: [OrderStatusOrderByInput!]! = [], take: Int, skip: Int! = 0): [OrderStatus!]
  orderStatus(where: OrderStatusWhereUniqueInput!): OrderStatus
  orderStatusesCount(where: OrderStatusWhereInput! = {}): Int
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  chatRooms(where: ChatRoomWhereInput! = {}, orderBy: [ChatRoomOrderByInput!]! = [], take: Int, skip: Int! = 0): [ChatRoom!]
  chatRoom(where: ChatRoomWhereUniqueInput!): ChatRoom
  chatRoomsCount(where: ChatRoomWhereInput! = {}): Int
  chatMessages(where: ChatMessageWhereInput! = {}, orderBy: [ChatMessageOrderByInput!]! = [], take: Int, skip: Int! = 0): [ChatMessage!]
  chatMessage(where: ChatMessageWhereUniqueInput!): ChatMessage
  chatMessagesCount(where: ChatMessageWhereInput! = {}): Int
  currencyRates(where: CurrencyRateWhereInput! = {}, orderBy: [CurrencyRateOrderByInput!]! = [], take: Int, skip: Int! = 0): [CurrencyRate!]
  currencyRate(where: CurrencyRateWhereUniqueInput!): CurrencyRate
  currencyRatesCount(where: CurrencyRateWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
