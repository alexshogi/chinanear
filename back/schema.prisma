// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                  String    @id @default(cuid())
  name                String    @default("")
  email               String    @unique @default("")
  password            String
  surname             String    @default("")
  companyName         String    @default("")
  companyMarketNameRu String    @default("")
  companyMarketNameEn String    @default("")
  postcode            String    @default("")
  country             String    @default("")
  city                String    @default("")
  street              String    @default("")
  house               String    @default("")
  building            String    @default("")
  productsCreated     Product[] @relation("Product_author")
  productsSelling     Product[] @relation("Product_seller")
  createdAt           DateTime? @default(now())
  updatedAt           DateTime? @default(now())
  from_Order_user     Order[]   @relation("Order_user")
  from_Order_seller   Order[]   @relation("Order_seller")
}

model Product {
  id              String    @id @default(cuid())
  title           String    @default("")
  caption         String    @default("")
  description     String    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  balance         Int?
  category1       String    @default("")
  category2       String    @default("")
  category3       String    @default("")
  intervals       String?
  isActive        Boolean   @default(false)
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @default(now())
  image_filesize  Int?
  image_extension String?
  image_width     Int?
  image_height    Int?
  image_id        String?
  author          User?     @relation("Product_author", fields: [authorId], references: [id])
  authorId        String?   @map("author")
  seller          User?     @relation("Product_seller", fields: [sellerId], references: [id])
  sellerId        String?   @map("seller")
  tags            Tag[]     @relation("Product_tags")

  @@index([authorId])
  @@index([sellerId])
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @default("")
  products Product[] @relation("Product_tags")
}

model Category {
  id                     String     @id @default(cuid())
  code                   String     @default("")
  titleRu                String     @default("")
  titleEn                String     @default("")
  titleCh                String     @default("")
  children               Category[] @relation("Category_children")
  isActive               Boolean    @default(false)
  createdAt              DateTime?  @default(now())
  updatedAt              DateTime?  @default(now())
  from_Category_children Category[] @relation("Category_children")
}

model Cart {
  id        String    @id @default(cuid())
  products  String    @default("")
  userId    String    @unique @default("")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
}

model OrderStatus {
  id                String    @id @default(cuid())
  code              String    @default("")
  color             String    @default("")
  titleRu           String    @default("")
  titleEn           String    @default("")
  titleCh           String    @default("")
  createdAt         DateTime? @default(now())
  updatedAt         DateTime? @default(now())
  from_Order_status Order[]   @relation("Order_status")
}

model Order {
  id          String       @id @default(cuid())
  products    String?
  user        User?        @relation("Order_user", fields: [userId], references: [id])
  userId      String?      @map("user")
  seller      User?        @relation("Order_seller", fields: [sellerId], references: [id])
  sellerId    String?      @map("seller")
  status      OrderStatus? @relation("Order_status", fields: [statusId], references: [id])
  statusId    String?      @map("status")
  address     String       @default("")
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @default(now())
  confirmedAt DateTime?    @default(now())
  paidAt      DateTime?    @default(now())

  @@index([userId])
  @@index([sellerId])
  @@index([statusId])
}
